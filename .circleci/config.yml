version: 2.1

commands:
   rollback-deployment:
    description: Rollback deployment
    steps:
      - run:
          name: rollback cluster
          when: on_fail
          command: |
            kubectl rollout undo deployments/mycapstone
      - run:
         name: check rollback details
         when: on_fail
         command: |
            echo '#####deploy##########'
            kubectl get deploy mycapstone
            echo '######rs#########'
            kubectl get rs
            echo '######get pods#########'
            kubectl get pods
            echo '#####desc pods##########'
            kubectl describe pods
            echo '######desc svc#########'
            kubectl describe services/mycapstone
      - run:
          name: check rollback status
          when: on_fail
          command: |
            cat ~/project/.circleci/files/clustername.txt
            export EksClusterName=$(tail -n 1 ~/project/.circleci/files/clustername.txt)
            echo ExistingEksClusterName: "${EksClusterName}"
            
            aws eks update-kubeconfig --name "${EksClusterName}"
            kubectl get svc mycapstone -o json | jq .status.loadBalancer.ingress[].hostname >> hostname.txt
            export API_IP=$(sed -e 's/^"//' -e 's/"$//' < hostname.txt)
            export API_URL="http://${API_IP}:80"
            echo "${API_URL}"
            curl "${API_URL}"


jobs:
  build-and-test-app:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - restore_cache:
         keys: [build-application]
      - run:
         name: Install dependencies
         command: |
           make install 
      - run:
         name: copy project files
         command: |
            sudo cp ./config/nginx.conf /etc/nginx/nginx.conf
            sudo cp -r ./www /www
      - run:
         name: build app
         command: |
           make build
      - run:
         name: test app
         command: |
           make test
      - save_cache:
         paths: [node_modules]
         key: build-application

  lint-app:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
         name: install dependencies
         command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x ./hadolint
      - run:
         name: lint on app
         command: |
            ./hadolint Dockerfile
            
  build-docker-and-push-image:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - run:
         name: install curl
         command: |
            apk add --update curl
      - setup_remote_docker
      - run:
         name: build docker image
         command: |
            docker build --tag=mycapstone:${CIRCLE_WORKFLOW_ID:0:7} .
            docker image ls
      - run:
         name: run docker image
         command: |
            docker run --detach --publish=80:80 --name=mycapstone mycapstone:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
         name: push to dockerhub
         command: |
            docker login -u kgaaythrii83 -p Dockerhub!123
            docker tag mycapstone:${CIRCLE_WORKFLOW_ID:0:7} kgaaythrii83/mycapstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker push kgaaythrii83/mycapstone:${CIRCLE_WORKFLOW_ID:0:7}

  get-cluster-details:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: get the cluster name
         command: |
            aws eks list-clusters --region us-east-1 --query clusters[0] --output text >> .circleci/files/clustername.txt 
            cat .circleci/files/clustername.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/project/.circleci/files
          paths:
            - .
  create-eks-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/project/.circleci/files
      - run:
         name: create the eks cluster
         command: |
            cat ~/project/.circleci/files/clustername.txt
            export EksClusterName=$(tail -n 1 ~/project/.circleci/files/clustername.txt)
            echo ExistingEksClusterName: "${EksClusterName}"
            
            aws cloudformation deploy --template-file .circleci/files/ekscluster.yml --tags project=mycapstone --stack-name "mycapstone-${CIRCLE_WORKFLOW_ID:0:7}"  --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo "cluster created" 
         no_output_timeout: 20m


  deploy-app-to-cluster:
    docker:
      - image: cimg/base:2021.04
    steps:
      - attach_workspace:
          at: ~/project/.circleci/files
      - run:
         name: install dependencies
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
            
      - run:
         name: configure kube
         command: |
            #sudo wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            #sudo cp minikube-linux-amd64 /usr/local/bin/minikube
            #sudo chmod 755 /usr/local/bin/minikube

            #minikube version
            #minikube start --driver=docker
            
            aws configure list
            
            aws sts get-caller-identity
            
            export EksClusterName=$(tail -n 1 ~/project/.circleci/files/clustername.txt)
            echo ExistingEksClusterName: "${EksClusterName}"
            
            aws eks update-kubeconfig --name "${EksClusterName}"
            kubectl get nodes
      - run:
         name: Deploy App
         command: |
            kubectl create deploy mycapstone --image=kgaaythrii83/mycapstone:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
         name: check deployment status
         command: |
            kubectl rollout status deployments/mycapstone

            kubectl expose deployment/capstone --port 80 --type=LoadBalancer

      - run:
         name: check deployment details
         command: |
            echo '#####deploy##########'
            kubectl get deploy mycapstone
            echo '######rs#########'
            kubectl get rs
            echo '#####get pods##########'
            kubectl get pods
            echo '######desc pods#########'
            kubectl describe pods
            echo '######desc svc#########'
            kubectl describe services/mycapstone
      - rollback-deployment
            


workflows:
  default:
    jobs:
      #- build-and-test-app
      #- lint-app
      #- build-docker-and-push-image
      #   requires: [build-and-test-app, lint-app]
      - get-cluster-details 
      - create-eks-cluster:
         requires: [get-cluster-details]        
      #- deploy-app-to-cluster:
      #   requires: [build-docker-and-push-image, get-cluster-details]      
   